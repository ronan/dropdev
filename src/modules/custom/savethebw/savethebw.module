<?php

/**
 * @file
 * Contains savethebw.module.
 */

use Drupal\Component\Render\PlainTextOutput;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\menu_item_extras\Entity\MenuItemExtrasMenuLinkContent;
use Drupal\node\NodeInterface;
use enshrined\svgSanitize\Sanitizer;

/**
 * Implements hook_preprocess_block().
 */
function savethebw_preprocess_block(&$vars) {
  if ($vars['plugin_id'] == 'page_title_block') {
    $exception = \Drupal::request()->attributes->get('exception');
    if ($exception && ($exception->getStatusCode() == 403 || $exception->getStatusCode() == 404)) {
      $vars['content']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter().
 */
function savethebw_ds_pre_render_alter(&$layout_render_array, $context, &$vars) {
  $function = 'savethebw_ds_pre_render_alter';
  $functions = [
    $function . '__' . $context['entity_type'],
    $function . '__' . $context['entity_type'] . '__' . $context['view_mode'],
    $function . '__' . $context['entity_type'] . '__' . $context['bundle'],
    $function . '__' . $context['entity_type'] . '__' . $context['bundle'] . '__' . $context['view_mode']
  ];
  // Execute context specific hooks
  array_map(function($fn) use(&$layout_render_array, $context, &$vars) {
    if (function_exists($fn)) $fn($layout_render_array, $context, $vars);
  }, $functions);
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY__BUNDLE().
 */
function savethebw_ds_pre_render_alter__node__blog(&$layout_render_array, $context, &$vars) {
  $node = $context['entity'];
  // Add opacity value class
  if ($node->hasField('field_image') && $node->field_image->isEmpty()) {
    $vars['attributes']['class'][] = 'no-image';
  } else {
    $vars['attributes']['class'][] = 'has-image';
  }
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY__BUNDLE().
 */
function savethebw_ds_pre_render_alter__node__press_release(&$layout_render_array, $context, &$vars) {
  $node = $context['entity'];
  // Add opacity value class
  if ($node->hasField('field_image') && $node->field_image->isEmpty()) {
    $vars['attributes']['class'][] = 'no-image';
  } else {
    $vars['attributes']['class'][] = 'has-image';
  }
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY__BUNDLE().
 */
function savethebw_ds_pre_render_alter__node__resource(&$layout_render_array, $context, &$vars) {
  $node = $context['entity'];
  // Add opacity value class
  if ($node->hasField('field_teaser_image') && $node->field_teaser_image->isEmpty()) {
    $vars['attributes']['class'][] = 'no-image';
  } else {
    $vars['attributes']['class'][] = 'has-image';
  }
  if ($node->hasField('field_featured') && $node->field_featured->value == 1) {
    $vars['attributes']['class'][] = 'is-featured';
  }
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY__BUNDLE().
 */
function savethebw_ds_pre_render_alter__paragraph__homepage_banner_item(&$layout_render_array, $context, &$vars) {
  $paragraph = $vars['content']['#paragraph'];
  // Add opacity value class
  if ($paragraph->hasField('field_image_overlay_opacity') &&
      !$paragraph->field_image_overlay_opacity->isEmpty()) {
    $vars['attributes']['class'][] = 'opacity-' . $paragraph->field_image_overlay_opacity->value;
  }
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY__BUNDLE().
 */
function savethebw_ds_pre_render_alter__paragraph__embed(&$layout_render_array, $context, &$vars) {
  $paragraph = $vars['content']['#paragraph'];
  // Add opacity value class
  if ($paragraph->hasField('field_full_width') &&
      $paragraph->field_full_width->value == 1) {
    $vars['attributes']['class'][] = 'full-width';
  }
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY__BUNDLE().
 */
function savethebw_ds_pre_render_alter__paragraph__logo(&$layout_render_array, $context, &$vars) {
  $paragraph = $vars['content']['#paragraph'];
  // Add opacity value class
  if ($paragraph->hasField('field_size') && !$paragraph->field_size->isEmpty()) {
    $vars['attributes']['class'][] = 'size-' . (int) $paragraph->field_size->value;
  }
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY__BUNDLE().
 */
function savethebw_ds_pre_render_alter__paragraph__image_gallery(&$layout_render_array, $context, &$vars) {
  $vars['#attached']['library'][] = 'savethebw_theme/justified-gallery';
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY__BUNDLE().
 */
function savethebw_ds_pre_render_alter__paragraph(&$layout_render_array, $context, &$vars) {
  $paragraph = $vars['content']['#paragraph'];
  // Add background color class
  if ($paragraph->hasField('field_background_color') && !$paragraph->field_background_color->isEmpty()) {
    switch (strtolower($paragraph->field_background_color->color)) {
      case 'ffffff':
        $vars['attributes']['class'][] = 'color-white';
        break;
      case 'edf4f5':
        $vars['attributes']['class'][] = 'color-gray';
        break;
      default:
        break;
    }
  }
  // Add wave class
  if ($paragraph->hasField('field_wave') && !$paragraph->field_wave->isEmpty()) {
    $vars['has_wave'] = TRUE;
    $vars['attributes']['class'][] = strtolower(Html::cleanCssIdentifier($paragraph->field_wave->entity->name->value));
  }
  // Add space above class
  if ($paragraph->hasField('field_space_above') && !$paragraph->field_space_above->isEmpty()) {
    $vars['attributes']['class'][] = 'space-above-' . strtolower(Html::cleanCssIdentifier($paragraph->field_space_above->value));
  }
  // Add space below class
  if ($paragraph->hasField('field_space_below') && !$paragraph->field_space_below->isEmpty()) {
    $vars['attributes']['class'][] = 'space-below-' . strtolower(Html::cleanCssIdentifier($paragraph->field_space_below->value));
  }
  // Add width class
  if ($paragraph->hasField('field_width') && !$paragraph->field_width->isEmpty()) {
    $vars['attributes']['class'][] = 'width-' . strtolower(Html::cleanCssIdentifier($paragraph->field_width->value));
  }
  // Add layout
  if ($paragraph->hasField('field_layout') && !$paragraph->field_layout->isEmpty()) {
    $vars['attributes']['class'][] = 'layout-' . strtolower(Html::cleanCssIdentifier($paragraph->field_layout->value));
  }
  // Add alignment class
  if ($paragraph->hasField('field_image_alignment') && !$paragraph->field_image_alignment->isEmpty()) {
    $vars['attributes']['class'][] = 'align-' . strtolower(Html::cleanCssIdentifier($paragraph->field_image_alignment->value));
  }
  // Title box
  if ($paragraph->hasField('field_title_background_box') && !$paragraph->field_title_background_box->isEmpty()) {
    if ((bool) $paragraph->field_title_background_box->value) {
      $vars['attributes']['class'][] = 'has-title-box';
    }
  }
  // Overlay opacity
  if ($paragraph->hasField('field_overlay_opacity') &&
      !$paragraph->field_overlay_opacity->isEmpty()) {
    $vars['attributes']['class'][] = 'opacity-' . $paragraph->field_overlay_opacity->value;
  }
  //field_image_height
  if ($paragraph->hasField('field_image_height') &&
      !$paragraph->field_image_height->isEmpty()) {
    $vars['attributes']['class'][] = 'image-height-' . $paragraph->field_image_height->value;
  }
  // Freeform color field
  if ($paragraph->hasField('field_background_color_hex') &&
      !$paragraph->field_background_color_hex->isEmpty()) {
    $vars['attributes']['style'] = '--component-bg-color: ' . $paragraph->field_background_color_hex->color;
  }
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function savethebw_entity_view_mode_alter(&$view_mode, $entity, $context) {
  $function = 'savethebw_entity_view_mode_alter';
  if (method_exists($entity, 'getEntityTypeId') && method_exists($entity, 'bundle')) {
    $entity_type = $entity->getEntityTypeId();
    $entity_bundle = $entity->bundle();
    $functions = [
      $function . '__' . $entity_type,
      $function . '__' . $entity_type . '__' . $view_mode,
      $function . '__' . $entity_type . '__' . $entity_bundle,
      $function . '__' . $entity_type . '__' . $entity_bundle . '__' . $view_mode,
    ];
    // Execute context specific hooks
    array_map(function($fn) use(&$view_mode, $entity, $context) {
      if (function_exists($fn)) $fn($view_mode, $entity, $context);
    }, $functions);
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function savethebw_editor_js_settings_alter(&$settings) {
  foreach (array_keys($settings['editor']['formats']) as $format) {
    // Add format class to iframe body for styling text formats
    $editorSettings = &$settings['editor']['formats'][$format]['editorSettings'];
    // $settings['editor']['formats']['html']['editorSettings']['format_tags'] = "p;h2;h3;h4;h5;h6";
    $editorSettings['bodyClass'] = strtolower(Html::cleanCssIdentifier($format));
    // $editorSettings['disableNativeSpellChecker'] = false;
    // $editorSettings['removePlugins'] = 'scayt,menubutton,contextmenu';
    // $editorSettings['browserContextMenuOnCtrl'] = true;
    // Richtext title should only be a couple lines
    if ($format == 'title') {
      $editorSettings['height'] = '57px';
      $editorSettings['autoGrow_minHeight'] = 57;
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY__BUNDLE().
 */
function savethebw_ds_pre_render_alter__node__alert(&$layout_render_array, $context, &$vars) {
  $vars['attributes']['id'] = 'alert-' . $context['entity']->uuid();
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY().
 */
function savethebw_ds_pre_render_alter__node(&$layout_render_array, $context, &$vars) {
  $node = $context['entity'];
  if ($node->hasField('field_banner_overlay_opacity') && !$node->field_banner_overlay_opacity->isEmpty()) {
    $vars['attributes']['class'][] = 'opacity-' . $node->field_banner_overlay_opacity->value;
  }
  if ($node->hasField('field_banner_background_image')) {
    if ($node->field_banner_background_image->isEmpty()) {
      $vars['attributes']['class'][] = 'no-banner-image';
    } else {
      $vars['attributes']['class'][] = 'has-banner-image';
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY().
 */
function savethebw_ds_pre_render_alter__node__error_page(&$layout_render_array, $context, &$vars) {
  $node = $context['entity'];
  if ($node->hasField('field_background_image')) {
    if ($node->field_background_image->isEmpty()) {
      $vars['attributes']['class'][] = 'no-banner-image';
    } else {
      $vars['attributes']['class'][] = 'has-banner-image';
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter__ENTITY__BUNDLE().
 */
function savethebw_ds_pre_render_alter__node__popup(&$layout_render_array, $context, &$vars) {
  $vars['attributes']['id'] = 'popup-' . $context['entity']->uuid();
}

/**
 * Implements hook_page_attachments().
 */
function savethebw_page_attachments(array &$attachments) {
  // Add styles applicable only to logged in users
  if (\Drupal::currentUser()->isAuthenticated()) {
    $attachments['#attached']['library'][] = 'savethebw/admin-styles';
  }
}

/**
 * Implements hook_query_TAG_alter(): tag search_$type with $type node_search.
 */
function savethebw_query_search_node_search_alter(AlterableInterface $query) {
  $query->condition('n.type', ['alert', 'popup'], 'NOT IN');
}

/**
 * Implements hook_form_FORMID_alter().
 */
function savethebw_form_search_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!empty($form['advanced'])) {
    $form['advanced']['#access'] = FALSE;
  }
  if (!empty($form['help_link'])) unset($form['help_link']);
}

/**
 * Implements hook_form_alter().
 */
function savethebw_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-resource-library-default') {
    if (!empty($form['keys'])) {
      $form['keys']['#attributes']['placeholder'] = $form['keys']['#title'];
    }
    // The module is showing the clear all filter at all times, even with the
    // patch from https://www.drupal.org/node/3162656
    $form['#cache']['contexts'][] = 'url.query_args';
    if (\Drupal::request()->query->count() == 0) {
      unset($form['actions']['reset']);
    }
    $form['#cache']['max-age'] = 0;
    if (!empty($form['sort_bef_combine']['#context'])) {
      $form['sort_bef_combine']['#context']['#plugin_id'] = 'select2boxes';
      $form['sort_bef_combine']['#attributes'] = $form['format']['#attributes']; 
    }
  }
  // elseif ($form['#id'] == 'views-exposed-form-blog-block-3') {
  //   $form['#action'] = '/our-blog/all';
  // }
  elseif ($form['#id'] == 'protected-pages-enter-password') {
    $form['#suffix'] = '<div class="pw-form-help"><p>Need help?<br /><a href="mailto:info@savetheboundarywaters.org">Contact us</a></div>';
  }
  elseif ($form['#id'] == 'views-exposed-form-blog-block-2') {
    $form['#cache']['max-age'] = 0;
    if (!empty($form['key'])) {
      $form['key']['#attributes']['placeholder'] = $form['key']['#title'];
    }
  }
}

/**
 * Implements hook_preprocess_field__FIELD().
 */
function savethebw_preprocess_field__field_date_range(&$vars) {
  if (!empty($vars['items'][0]['content']['end']['date']['#markup'])) {
    $end = &$vars['items'][0]['content']['end']['date']['#markup'];
    $start = &$vars['items'][0]['content']['start']['date']['#markup'];
    $end = preg_replace('/\d{4}/', '', $end);
    $end = preg_replace('/([A-Za-z]+)/', '<span class="month">$1</span>', $end);
    $start = preg_replace('/([A-Za-z]+)/', '<span class="month">$1</span>', $start);
    $end = '<span class="range">' . preg_replace('/(\d+)/', '<span class="day">$1</span>', $end) . '</span>';
    $start = '<span class="range">' . preg_replace('/(\d+)/', '<span class="day">$1</span>', $start) . '</span>';
  } else {
    $start = &$vars['items'][0]['content']['start']['date']['#markup'];
    $start = preg_replace('/([A-Za-z]+)/', '<span class="month">$1</span>', $start);
    $start = preg_replace('/(\d{4})/', '<span class="year">$1</span>', $start);
    $start = preg_replace('/(\d{1})/', '<span class="day">$1</span>', $start);
    $start = preg_replace('/(\d{2})/', '<span class="day">$1</span>', $start);
  }
}

/**
 * Implements hook_preprocess_field__FIELD().
 */
function savethebw_preprocess_field__field_background_video(&$vars) {
  $entity = $vars['element']['#object'];
  // If there's a background image on the entity, add it as the poster image
  // for the video field.
  if ($entity->hasField('field_background_image') && !$entity->field_background_image->isEmpty()) {
    $image = $entity->field_background_image->first();
    $poster = \Drupal::service('file_url_generator')->generateAbsoluteString($image->entity->getFileUri());
    if (!empty($vars['items'][0]['content']['#player_attributes'])) {
      $vars['items'][0]['content']['#player_attributes']['poster'] = $poster;
    }
  }
}

/**
 * Implements hook_preprocess_field__FIELD().
 */
function savethebw_preprocess_field__field_background_image(&$vars) {
  $entity = $vars['element']['#object'];
  // If there's a background video field on the entity, this field is used as a
  // poster image rather than being displayed.
  if ($entity->hasField('field_background_video') && !$entity->field_background_video->isEmpty()) {
    unset($vars['items'][0]);
  }
}

/**
 * Implements hook_preprocess_menu__ID()
 */
function savethebw_preprocess_menu__main(&$vars) {
  $vars['#cache']['tags'][] = 'savethebw:menu_feature';
  foreach ($vars['items'] as $id => &$item) {
    $uuid = str_replace('menu_link_content:', '', $id);
    if ($uuid) {
      $entity = \Drupal::service('entity.repository')->loadEntityByUuid('menu_link_content', $uuid);
      if ($entity instanceof MenuItemExtrasMenuLinkContent) {
        $item['id'] = $entity->id();
      }
    }
  }
}

/**
 * Implements hook_ENTITY_update().
 */
function savethebw_block_content_update($entity) {
  if ($entity->bundle() == 'menu_feature') {
    Cache::invalidateTags(['savethebw:menu_feature']);
  }
}

/**
 * Implements hook_ENTITY_insert
 */
function savethebw_block_content_insert($entity) {
  if ($entity->bundle() == 'menu_feature') {
    Cache::invalidateTags(['savethebw:menu_feature']);
  }
}

/**
 * Implements hook_ENTITY_update().
 */
function savethebw_node_update($entity) {
  if ($entity->bundle() == 'event') {
    // Invalidate all blocks/views/menu items associated with the event menu
    // teaser display
    Cache::invalidateTags(['savethebw:event_menu_teaser']);
  } else if ($entity->bundle() == 'alert') {
    Cache::invalidateTags(['savethebw:alerts']);
  } else if ($entity->bundle() == 'popup') {
    Cache::invalidateTags(['savethebw:popups']);
  }
}

/**
 * Implements hook_ENTITY_insert
 */
function savethebw_node_insert($entity) {
  if ($entity->bundle() == 'alert') {
    Cache::invalidateTags(['savethebw:alerts']);
  } else if ($entity->bundle() == 'popup') {
    Cache::invalidateTags(['savethebw:popups']);
  }
}

/**
 * Implements hook_entity_view_mode_alter__ENTITY__BUNDLE__VIEWMODE().
 */
function savethebw_entity_view_mode_alter__node__resource__teaser(&$view_mode, $entity, $context) {
  if ($entity->hasField('field_resource') && !$entity->field_resource->isEmpty()) {
    switch ($entity->field_resource->entity->bundle()) {
      case 'resource_link':
        $view_mode = 'teaser_w_link';
        break;
      case 'resource_file':
        $view_mode = 'teaser_w_file';
        break;
      default:
        break;
    }
  }
}

/**
 * Implements hook_entity_view_mode_alter__ENTITY__BUNDLE__VIEWMODE().
 */
function savethebw_entity_view_mode_alter__paragraph__image(&$view_mode, $entity, $context) {
  // Allow images within the image paragraph component to be downloaded if needed.
  if ($entity->hasField('field_image')
    && !$entity->field_image->isEmpty()
    && $entity->hasField('field_download')
    && $entity->field_download->value == 1
  ) {
    $view_mode = 'images_download';
  }
}
